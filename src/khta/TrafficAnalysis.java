/*
 * Copyright (C) 2015 Software&System Lab. Kangwon National University.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package khta;

import evaluation.BasicData;
import evaluation.ContourPlotter;
import evaluation.ContourType;
import evaluation.Evaluation;
import evaluation.EvaluationOption;
import evaluation.Interval;
import evaluation.StationAcceleration;
import evaluation.StationAverageLaneFlow;
import evaluation.StationDensity;
import evaluation.StationSpeed;
import evaluation.StationTotalFlow;
import infra.Infra;
import infra.Period;
import infra.Section;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import util.KHTAParam;

/**
 *
 * @author soobin Jeon <j.soobin@gmail.com>, chungsan Lee <dj.zlee@gmail.com>,
 * youngtak Han <gksdudxkr@gmail.com>
 */
public class TrafficAnalysis extends javax.swing.JPanel {

    private final Infra infra;
    private KHTAOption khtaOption;
    private ContourTapPanel contourTapPanel;
    private final String OPTION_FILE = KHTAParam.CONFIG_DIR + File.separator + "khta.cfg";

    /**
     * Creates new form TrafficAnalysis
     *
     * @param _infra
     * @param khtaOption
     * @param contourTapPanel
     */
    public TrafficAnalysis(Infra _infra, KHTAOption khtaOption, ContourTapPanel contourTapPanel) {
        initComponents();
        infra = _infra;
        this.khtaOption = khtaOption;
        this.contourTapPanel = contourTapPanel;
        new Timer().schedule(new TimerTask() {

            @Override
            public void run() {
                init();
            }
        }, 10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nATSRLCalendar1 = new gadget.calendar.NATSRLCalendar();
        jPanel5 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cbxInterval = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        cbxStartHour = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        cbxStartMin = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        cbxEndHour = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        cbxEndMin = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbxDuration = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cbxSections = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        cbxSpeed = new javax.swing.JCheckBox();
        cbxDensity = new javax.swing.JCheckBox();
        cbxTotalFlow = new javax.swing.JCheckBox();
        cbxAverageLaneFlow = new javax.swing.JCheckBox();
        cbxAcceleration = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        cbxVMT = new javax.swing.JCheckBox();
        cbxLVMT = new javax.swing.JCheckBox();
        cbxVHT = new javax.swing.JCheckBox();
        cbxDVH = new javax.swing.JCheckBox();
        cbxFlowRates = new javax.swing.JCheckBox();
        cbxTT = new javax.swing.JCheckBox();
        cbxSV = new javax.swing.JCheckBox();
        cbxCM = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField_CTS = new javax.swing.JTextField();
        jTextField_CD = new javax.swing.JTextField();
        jTextField_DLC = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnExtraction = new javax.swing.JButton();
        txOutputFolder = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        browser = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        cbxExcel = new javax.swing.JCheckBox();
        cbxCSV = new javax.swing.JCheckBox();
        cbxContour = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jCheckBoxOCAE = new javax.swing.JCheckBox();
        jCheckBoxIMSD = new javax.swing.JCheckBox();
        jCheckBoxI0MSD = new javax.swing.JCheckBox();

        setName("Traffic Analysis"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Route & Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)))); // NOI18N

        nATSRLCalendar1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel17.setText("Time Interval");

        cbxInterval.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel18.setText("Start Time");

        cbxStartHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxStartHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        cbxStartHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxStartHourActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel14.setText(":");

        cbxStartMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxStartMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel20.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel20.setText("End Time");

        cbxEndHour.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxEndHour.setMaximumRowCount(15);
        cbxEndHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        cbxEndHour.setSelectedIndex(8);
        cbxEndHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEndHourActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel15.setText(":");

        cbxEndMin.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxEndMin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel3.setText("or");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel5.setText("for");

        cbxDuration.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        cbxDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDurationActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel6.setText("hour");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel18)
                                .addComponent(jLabel20))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cbxEndHour, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbxStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel15)
                                    .addGap(1, 1, 1)
                                    .addComponent(cbxEndMin, 0, 1, Short.MAX_VALUE))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbxStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel17)
                            .addGap(18, 18, 18)
                            .addComponent(cbxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbxInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(cbxStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(cbxEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(cbxEndMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(cbxStartMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(cbxDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbxSections.setFont(new java.awt.Font("Gulim", 0, 12)); // NOI18N
        cbxSections.setMinimumSize(new java.awt.Dimension(200, 25));
        cbxSections.setPreferredSize(new java.awt.Dimension(250, 25));
        cbxSections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxSectionsMouseClicked(evt);
            }
        });
        cbxSections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSectionsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Route");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nATSRLCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxSections, 0, 283, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(nATSRLCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Route & Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)), "Data & Measurement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Station Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        cbxSpeed.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxSpeed.setText("Speed");

        cbxDensity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxDensity.setText("Density");

        cbxTotalFlow.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxTotalFlow.setText("Total Flow");
        cbxTotalFlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTotalFlowActionPerformed(evt);
            }
        });

        cbxAverageLaneFlow.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxAverageLaneFlow.setText("Avg. Lane Flow");
        cbxAverageLaneFlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAverageLaneFlowActionPerformed(evt);
            }
        });

        cbxAcceleration.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxAcceleration.setText("Acceleration");
        cbxAcceleration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAccelerationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbxSpeed)
                .addGap(18, 18, 18)
                .addComponent(cbxDensity)
                .addGap(18, 18, 18)
                .addComponent(cbxTotalFlow)
                .addGap(18, 18, 18)
                .addComponent(cbxAverageLaneFlow)
                .addGap(18, 18, 18)
                .addComponent(cbxAcceleration)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cbxSpeed)
                .addComponent(cbxDensity)
                .addComponent(cbxTotalFlow)
                .addComponent(cbxAverageLaneFlow)
                .addComponent(cbxAcceleration))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Traffic Flow Measurements", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        cbxVMT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxVMT.setText("Vehicle Miles Traveled (VMT)");
        cbxVMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxVMTActionPerformed(evt);
            }
        });

        cbxLVMT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxLVMT.setText("Lost VMT for congestion (LVMT)");
        cbxLVMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLVMTActionPerformed(evt);
            }
        });

        cbxVHT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxVHT.setText("Vehicle Hour Traveled (VHT)");
        cbxVHT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxVHTActionPerformed(evt);
            }
        });

        cbxDVH.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxDVH.setText("Delayed Vehicle Hours (DVH)");
        cbxDVH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDVHActionPerformed(evt);
            }
        });

        cbxFlowRates.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxFlowRates.setText("Mainlane and Ramp Flow Rates");
        cbxFlowRates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxFlowRatesActionPerformed(evt);
            }
        });

        cbxTT.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxTT.setText("Travel Time (TT)");
        cbxTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTTActionPerformed(evt);
            }
        });

        cbxSV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxSV.setText("Speed Variations (SV)");
        cbxSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSVActionPerformed(evt);
            }
        });

        cbxCM.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxCM.setText("Congested Miles (CM)");
        cbxCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxCMActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Congestion Threshold Speed (km)");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Default Lane Capacity (veh/hr)");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Critical Density (veh/km)");

        jTextField_CTS.setText("0.0");

        jTextField_CD.setText("0.0");

        jTextField_DLC.setText("0.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_CTS, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxVMT)
                    .addComponent(cbxLVMT)
                    .addComponent(cbxVHT)
                    .addComponent(cbxDVH)
                    .addComponent(cbxFlowRates)
                    .addComponent(cbxTT)
                    .addComponent(cbxSV)
                    .addComponent(cbxCM)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_DLC, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_CD)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbxVMT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxLVMT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxVHT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxDVH)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxFlowRates)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxTT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxSV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxCM)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_CTS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_CD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField_DLC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation & Simulation Output Extraction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extraction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        btnExtraction.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnExtraction.setText("Extraction");
        btnExtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractionActionPerformed(evt);
            }
        });

        txOutputFolder.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txOutputFolder.setText("D:\\");

            jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jLabel2.setText("Output Folder");

            browser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            browser.setText("Browser");
            browser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    browserActionPerformed(evt);
                }
            });

            jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jLabel9.setText("Output Format");

            cbxExcel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            cbxExcel.setSelected(true);
            cbxExcel.setText("Excel");

            cbxCSV.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            cbxCSV.setText("CSV");

            cbxContour.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            cbxContour.setText("Contour");

            jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jLabel10.setText("Output Option");

            jCheckBoxOCAE.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jCheckBoxOCAE.setText("Open contour after extraction");

            jCheckBoxIMSD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jCheckBoxIMSD.setText("Interpolate missing station data");
            jCheckBoxIMSD.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    jCheckBoxIMSDItemStateChanged(evt);
                }
            });

            jCheckBoxI0MSD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            jCheckBoxI0MSD.setText("Interpolate '0' missing station data");
            jCheckBoxI0MSD.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    jCheckBoxI0MSDItemStateChanged(evt);
                }
            });

            javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
            jPanel7.setLayout(jPanel7Layout);
            jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(7, 7, 7)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(txOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(browser))
                        .addComponent(jLabel2)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(cbxExcel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbxCSV)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbxContour))
                        .addComponent(jLabel9))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10)
                        .addComponent(jCheckBoxI0MSD)
                        .addComponent(jCheckBoxIMSD)
                        .addComponent(jCheckBoxOCAE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                    .addComponent(btnExtraction)
                    .addContainerGap())
            );
            jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jCheckBoxOCAE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jCheckBoxIMSD)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jCheckBoxI0MSD))
                                .addGroup(jPanel7Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbxExcel)
                                        .addComponent(cbxCSV)
                                        .addComponent(cbxContour))
                                    .addGap(4, 4, 4)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txOutputFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(browser))))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(btnExtraction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );
        }// </editor-fold>//GEN-END:initComponents

    private void cbxTotalFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTotalFlowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTotalFlowActionPerformed

    private void cbxAverageLaneFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAverageLaneFlowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAverageLaneFlowActionPerformed

    private void cbxAccelerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAccelerationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAccelerationActionPerformed

    private void cbxStartHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxStartHourActionPerformed
        int slt1 = this.cbxStartHour.getSelectedIndex();
        int slt2 = this.cbxEndHour.getSelectedIndex();
        if (slt1 > slt2) {
            this.cbxEndHour.setSelectedIndex(slt1);
        }
    }//GEN-LAST:event_cbxStartHourActionPerformed

    private void cbxEndHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEndHourActionPerformed
        int slt1 = this.cbxStartHour.getSelectedIndex();
        int slt2 = this.cbxEndHour.getSelectedIndex();
        if (slt1 > slt2) {
            this.cbxStartHour.setSelectedIndex(slt2);
        }
    }//GEN-LAST:event_cbxEndHourActionPerformed

    private void cbxDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDurationActionPerformed
//        selectDuration();
        if (cbxDuration.getSelectedIndex() != 0) {
            cbxEndHour.setEnabled(false);
            cbxEndMin.setEnabled(false);
        } else {
            cbxEndHour.setEnabled(true);
            cbxEndMin.setEnabled(true);
        }
    }//GEN-LAST:event_cbxDurationActionPerformed

    private void cbxSectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSectionsActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxSectionsActionPerformed

    private void cbxSectionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxSectionsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSectionsMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        //loadSection();
    }//GEN-LAST:event_formComponentShown

    private void cbxVMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxVMTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxVMTActionPerformed

    private void cbxLVMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLVMTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxLVMTActionPerformed

    private void cbxVHTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxVHTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxVHTActionPerformed

    private void cbxDVHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDVHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxDVHActionPerformed

    private void cbxFlowRatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxFlowRatesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxFlowRatesActionPerformed

    private void cbxTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTTActionPerformed

    private void cbxSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSVActionPerformed

    private void cbxCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxCMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxCMActionPerformed

    private void browserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserActionPerformed
        // TODO add your handling code here:
        selectOutputPath();
    }//GEN-LAST:event_browserActionPerformed

    private void btnExtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractionActionPerformed
        // TODO add your handling code here:
        new Timer().schedule(new TimerTask() {

            @Override
            public void run() {
                evaluation();
            }
        }, 10);

    }//GEN-LAST:event_btnExtractionActionPerformed

    private void jCheckBoxIMSDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIMSDItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
            jCheckBoxI0MSD.setSelected(false);
    }//GEN-LAST:event_jCheckBoxIMSDItemStateChanged

    private void jCheckBoxI0MSDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxI0MSDItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
            jCheckBoxIMSD.setSelected(false);
    }//GEN-LAST:event_jCheckBoxI0MSDItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browser;
    private javax.swing.JButton btnExtraction;
    private javax.swing.JCheckBox cbxAcceleration;
    private javax.swing.JCheckBox cbxAverageLaneFlow;
    private javax.swing.JCheckBox cbxCM;
    private javax.swing.JCheckBox cbxCSV;
    private javax.swing.JCheckBox cbxContour;
    private javax.swing.JCheckBox cbxDVH;
    private javax.swing.JCheckBox cbxDensity;
    private javax.swing.JComboBox cbxDuration;
    private javax.swing.JComboBox cbxEndHour;
    private javax.swing.JComboBox cbxEndMin;
    private javax.swing.JCheckBox cbxExcel;
    private javax.swing.JCheckBox cbxFlowRates;
    private javax.swing.JComboBox cbxInterval;
    private javax.swing.JCheckBox cbxLVMT;
    private javax.swing.JCheckBox cbxSV;
    private javax.swing.JComboBox cbxSections;
    private javax.swing.JCheckBox cbxSpeed;
    private javax.swing.JComboBox cbxStartHour;
    private javax.swing.JComboBox cbxStartMin;
    private javax.swing.JCheckBox cbxTT;
    private javax.swing.JCheckBox cbxTotalFlow;
    private javax.swing.JCheckBox cbxVHT;
    private javax.swing.JCheckBox cbxVMT;
    private javax.swing.JCheckBox jCheckBoxI0MSD;
    private javax.swing.JCheckBox jCheckBoxIMSD;
    private javax.swing.JCheckBox jCheckBoxOCAE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField jTextField_CD;
    private javax.swing.JTextField jTextField_CTS;
    private javax.swing.JTextField jTextField_DLC;
    private gadget.calendar.NATSRLCalendar nATSRLCalendar1;
    private javax.swing.JTextField txOutputFolder;
    // End of variables declaration//GEN-END:variables

    private void init() {
        loadSection();
        setInterval(Interval.getMinTMCInterval());

        // duration
        this.cbxDuration.addItem("Select");
        for (int i = 1; i <= 32; i++) {
            this.cbxDuration.addItem(i);
        }
        
        // load option saved perviously
        File optFile = new File(OPTION_FILE);
        if(!optFile.exists()) 
        {
            System.err.println("Option file does not be found");
        }
        else
        {
            khtaOption = KHTAOption.load(OPTION_FILE);
            adjustLoadOption();
        }
        
    }
    
    private void adjustLoadOption(){
        EvaluationOption opt = khtaOption.getEvaluationOption();
        Calendar c = null;
        
        //섹션 설정
        if(cbxSections.getItemCount() >= khtaOption.getSectionIndex()){
            cbxSections.setSelectedIndex(khtaOption.getSectionIndex());
        }
        //달력 설정
        ArrayList<Period> periods = opt.getPeriods();
        if(periods.size() > 0)
        {
            //시작 시간 설정
            cbxStartHour.setSelectedIndex(periods.get(0).start_hour);
            cbxStartMin.setSelectedIndex(periods.get(0).start_min);
            for(Period p : periods){
                c = Calendar.getInstance();
                c.setTime(p.startDate);
                nATSRLCalendar1.preselectDate(c);
            }

            //Interval 설정
            cbxInterval.setSelectedIndex(khtaOption.getIntervalIndex());

            //Duration 설정
            if(khtaOption.getDuration() > 0)
            {
                cbxEndHour.disable();
                cbxEndMin.disable();
                cbxDuration.setSelectedIndex(khtaOption.getDuration());
            }
            else
            {
                cbxEndHour.setSelectedIndex(periods.get(0).end_hour);
                cbxEndMin.setSelectedIndex(periods.get(0).end_min);
            }
        }
        
        //Station Data 설정
        cbxSpeed.setSelected(opt.getSpeedCheck());
        cbxDensity.setSelected(opt.getDensityCheck());
        cbxTotalFlow.setSelected(opt.getTotalFlowCheck());
        cbxAverageLaneFlow.setSelected(opt.getAverageLaneFlowCheck());
        cbxAcceleration.setSelected(opt.getAccelerationCheck());
        
        //Traffic Flow Measurements 설정
        cbxVMT.setSelected(opt.getVMT());
        cbxLVMT.setSelected(opt.getLVMT());
        cbxVHT.setSelected(opt.getVHT());
        cbxDVH.setSelected(opt.getDVH());
        cbxFlowRates.setSelected(opt.getFlowRates());
        cbxTT.setSelected(opt.getTT());
        cbxSV.setSelected(opt.getSV());
        cbxCM.setSelected(opt.getCM());
        if(opt.getCTS() > 0)
            jTextField_CTS.setText("" + opt.getCTS());
        if(opt.getCD() > 0)
            jTextField_CD.setText("" + opt.getCD());
        if(opt.getDLC() > 0)
            jTextField_DLC.setText("" + opt.getDLC());
        
        //Output Format 설정
        cbxExcel.setSelected(khtaOption.getExcelCheck());
        cbxCSV.setSelected(khtaOption.getCSVCheck());
        cbxContour.setSelected(khtaOption.getContourCheck());
        
        //Output Folder 설정
        txOutputFolder.setText(khtaOption.getOutputPath());
        
        //Output Option 설정
        jCheckBoxOCAE.setSelected(opt.getOCAE());
        jCheckBoxIMSD.setSelected(opt.getIMSD());
        jCheckBoxI0MSD.setSelected(opt.getI0MSD());
    }

    private void setInterval(int runningInterval) {
        if (this.cbxInterval.getItemCount() > 0) {
            cbxInterval.removeAllItems();
        }

        for (Interval i : Interval.values()) {
            if (i.second >= runningInterval) {
                this.cbxInterval.addItem(i);
            }
        }
    }

    private void loadSection() {
        this.cbxSections.removeAllItems();
        for (Section s : infra.getSections()) {
            this.cbxSections.addItem(s);
        }
    }

    private void selectOutputPath() {
        JFileChooser chooser = new JFileChooser();

        String path = ".";
        String prevPath = this.txOutputFolder.getText();
        if (!prevPath.isEmpty()) {
            path = new File(prevPath).getAbsolutePath();
        }

        chooser.setCurrentDirectory(new java.io.File(path));
        chooser.setDialogTitle("Select output folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.txOutputFolder.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }

    private void evaluation() {
        KHTAOption tempOption = getOption();
        if (tempOption == null) {
            return;
        } else {
            khtaOption = tempOption;

            EvaluationOption eo = khtaOption.getEvaluationOption();
            if ((eo != null)) {
                // save option
                KHTAOption.save(khtaOption, OPTION_FILE);
                
                // open RunningDialog
                RunningDialog rd = new RunningDialog((Frame) this.getTopLevelAncestor(), true);
                rd.setLocationRelativeTo(this);
                Timer t = new Timer();
                t.schedule(new EvaluateTask(khtaOption, eo, rd), 10);
                rd.setTimer(t);
                rd.setVisible(true);
            }
        }
    }

    class EvaluateTask extends TimerTask {

        KHTAOption ko;
        EvaluationOption eo;
        RunningDialog rd;
        ArrayList<Period> periods;
        Section selectedSection;
        String outputPath;
        ArrayList<BasicData> basicDataSet;

        public EvaluateTask(KHTAOption ko, EvaluationOption eo, RunningDialog rd) {
            this.ko = ko;
            this.eo = eo;
            this.rd = rd;
            periods = eo.getPeriods();
            selectedSection = eo.getSelectedSection();
            outputPath = ko.getOutputPath();
            basicDataSet = new ArrayList<>();
            rd.showLog();
        }

        @Override
        public void run() {
            runEvaluate();

            // close RunningDialog after 1.8 seconds
            rd.close(1.8);

            // open output folder
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.open(new File(outputPath));
                // if error, open log file
                //if(hasError) desktop.open(new File("log.txt"));
            } catch (IOException ex) {
                Logger.getLogger(TrafficAnalysis.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void runEvaluate() {
            for (Period p : periods) {
                //해당하는 시간내 섹션의 데이터를 로드
                selectedSection.loadData(p, null);

                //체크박스에 맞춰 evaluation.process 실행
                if (eo.getSpeedCheck()) {
                    //StationSpeed ss = new StationSpeed(p, selectedSection, outputPath);
                    basicDataSet.add(new StationSpeed(p, selectedSection, outputPath, eo));
                }
                if (eo.getDensityCheck()) {
                    //StationDensity sd = new StationDensity(p, selectedSection, outputPath);
                    basicDataSet.add(new StationDensity(p, selectedSection, outputPath, eo));
                }
                if (eo.getTotalFlowCheck()) {
                    //StationTotalFlow stf = new StationTotalFlow(p, selectedSection, outputPath);
                    basicDataSet.add(new StationTotalFlow(p, selectedSection, outputPath, eo));
                }
                if (eo.getAverageLaneFlowCheck()) {
                    //StationAverageLaneFlow salf = new StationAverageLaneFlow(p, selectedSection, outputPath);
                    basicDataSet.add(new StationAverageLaneFlow(p, selectedSection, outputPath, eo));
                }
                if (eo.getAccelerationCheck()) {
                    //StationAcceleration sa = new StationAcceleration(p, selectedSection, outputPath);
                    basicDataSet.add(new StationAcceleration(p, selectedSection, outputPath, eo));
                }
                for (BasicData bd : basicDataSet) {
                    bd.process();
                    if (ko.getExcelCheck()) {
                        //엑셀 저장
                        try {
                            //this.saveExcel(outputPath + "speed_" + section.getName() + period.getPeriodString());
                            bd.saveExcel(outputPath);
                        } catch (Exception ex) {
                            Logger.getLogger(StationSpeed.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (ko.getCSVCheck()) {
                        try {
                            bd.saveCsv(outputPath);
                        } catch (Exception ex) {
                            Logger.getLogger(TrafficAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (ko.getContourCheck()) {
                        if (eo.getSpeedCheck()) {
                            saveContour(bd, ko, eo, ContourType.SPEED);
                        } else if (eo.getDensityCheck()) {
                            saveContour(bd, ko, eo, ContourType.DENSITY);
                        } else if (eo.getTotalFlowCheck()) {
                            saveContour(bd, ko, eo, ContourType.TOTAL_FLOW);
                        }// else if (eo.getAverageLaneFlowCheck()) {
                        //                        saveContour(ev, selectedOption, opts, ContourType.OCCUPANCY);
                        //                    }else if (ot.equals(OptionType.EVAL_TT)){
                        //                            System.out.println("EVALTT");
                        //                            saveContour(ev, selectedOption, opts, ContourType.TT);
                        //                    } else if (ot.equals(OptionType.EVAL_TT_REALTIME)){
                        //                            saveContour(ev, selectedOption, opts, ContourType.STT);
                        //                    }
                    }
                }
                basicDataSet.clear();
            }
        }
    }

    /**
     * Save contour
     *
     * @param ev
     * @param selectedOption
     * @param opts
     * @param cType
     */
    private void saveContour(Evaluation ev, KHTAOption selectedOption, EvaluationOption opts, ContourType cType) {
        ContourPlotter cp = new ContourPlotter(opts.getSelectedSection(), opts.getContourSetting(cType), ev, selectedOption.getOutputPath());
        cp.saveImage(opts.getOCAE());
    }

    private KHTAOption getOption() {

        int duration = -1;
        int sectionIndex = this.cbxSections.getSelectedIndex();

        //섹션 읽기
        Section selectedSection = (Section) this.cbxSections.getSelectedItem();

        //달력 읽기
        ArrayList<Calendar> selectedCalendar = new ArrayList();
        Collections.addAll(selectedCalendar, nATSRLCalendar1.getSelectedDates());

        if (selectedCalendar.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Check Calendar options");
            return null;
        }

        //선택한 날짜들 정렬하기
        Collections.sort(selectedCalendar, new Comparator<Calendar>() {
            @Override
            public int compare(Calendar o1, Calendar o2) {
                return Long.compare(o1.getTimeInMillis(), o2.getTimeInMillis());
            }
        });

        //interval 읽기
        Interval selectedInterval = null;
        if (cbxInterval.getSelectedIndex() == 0) {
            selectedInterval = Interval.I5MIN;
        } else if (cbxInterval.getSelectedIndex() == 1) {
            selectedInterval = Interval.I10MIN;
        } else if (cbxInterval.getSelectedIndex() == 2) {
            selectedInterval = Interval.I15MIN;
        } else if (cbxInterval.getSelectedIndex() == 3) {
            selectedInterval = Interval.I20MIN;
        } else if (cbxInterval.getSelectedIndex() == 4) {
            selectedInterval = Interval.I30MIN;
        } else if (cbxInterval.getSelectedIndex() == 5) {
            selectedInterval = Interval.I1HOUR;
        }

        //시작 시간, 끝 시간 읽기
        int shour = cbxStartHour.getSelectedIndex();
        int smin = cbxStartMin.getSelectedIndex();
        int ehour;
        int emin;
        if (cbxEndHour.isEnabled()) {
            ehour = cbxEndHour.getSelectedIndex();
            emin = cbxEndMin.getSelectedIndex();
        } else {
            duration = cbxDuration.getSelectedIndex();
            ehour = shour + duration;
            emin = smin;
        }

        //정렬된 dList를 이용하여 연결되지 않은 날짜 분리하여 sdate, edate 설정하기
        ArrayList<Period> periods = new ArrayList();
        DateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        Date sdate = null;
        Date edate = null;
        String stime;
        String etime;
        for (Calendar c : selectedCalendar) {
            int year = c.get(Calendar.YEAR);
            int month = c.get(Calendar.MONTH) + 1;
            int day = c.get(Calendar.DATE);

            stime = String.format("%4d%02d%02d%02d%02d%02d", year, month, day, shour, smin, 0);
            etime = String.format("%4d%02d%02d%02d%02d%02d", year, month, day, ehour, emin, 0);

            System.out.println(stime);
            System.out.println(etime);

            try {
                sdate = formatter.parse(stime);
                edate = formatter.parse(etime);
            } catch (ParseException ex) {

            }

            System.out.println("Start Date : " + sdate.toString());
            System.out.println("End Date : " + edate.toString());

            periods.add(new Period(sdate, edate, selectedInterval.getSecond()));
        }

        EvaluationOption opt = khtaOption.getEvaluationOption();

        opt.setSelectedSection(selectedSection);
        opt.setPeriods(periods);

        opt.setStationData(cbxSpeed.isSelected(), cbxDensity.isSelected(), cbxTotalFlow.isSelected(),
                cbxAverageLaneFlow.isSelected(), cbxAcceleration.isSelected());

        opt.setTrafficFlowMeasurements(cbxVMT.isSelected(), cbxLVMT.isSelected(), cbxVHT.isSelected(),
                cbxDVH.isSelected(), cbxFlowRates.isSelected(), cbxTT.isSelected(), cbxSV.isSelected(),
                cbxCM.isSelected(), Double.parseDouble(jTextField_CTS.getText()),
                Double.parseDouble(jTextField_CD.getText()), Double.parseDouble(jTextField_DLC.getText()));
        
        opt.setOutputOption(jCheckBoxOCAE.isSelected(), jCheckBoxIMSD.isSelected(), jCheckBoxI0MSD.isSelected());

        if (opt.isSelectedAnything() == false) {
            JOptionPane.showMessageDialog(this, "Check evaluation options");
            return null;
        }

        contourTapPanel.setContourOption();

        String outputPath = this.txOutputFolder.getText();

        khtaOption.setOptions(sectionIndex, duration, cbxInterval.getSelectedIndex(), outputPath,
                cbxExcel.isSelected(), cbxCSV.isSelected(), cbxContour.isSelected());

        return khtaOption;
    }

}
