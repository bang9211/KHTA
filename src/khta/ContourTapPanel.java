/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khta;

import evaluation.ContourPanel;
import evaluation.ContourPanel_Speed;
import evaluation.ContourType;
import evaluation.EvaluationOption;
import java.awt.BorderLayout;

/**
 *
 * @author HanYoungTak
 */
public class ContourTapPanel extends javax.swing.JPanel {
    private KHTAOption khtaOption;
    private EvaluationOption evaluationOption;
    
    private ContourPanel TTContourSetting = new ContourPanel(8, 60, false);
    private ContourPanel speedContourSetting = new ContourPanel(7, 100, true);
    private ContourPanel totalFlowContourSetting = new ContourPanel(8, 6000, false);
    private ContourPanel occupancyContourSetting = new ContourPanel(11, 100, false);
    private ContourPanel densityContourSetting = new ContourPanel(9, 150, false);   
    /**
     * Creates new form ContourPanel
     */
    public ContourTapPanel(KHTAOption khtaOption) {
        initComponents();
        this.khtaOption = khtaOption;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        panContourSettingSpeed = new javax.swing.JPanel();
        panContourSettingTotalFlow = new javax.swing.JPanel();
        panContourSettingDensity = new javax.swing.JPanel();
        panContourSettingAverageFlow = new javax.swing.JPanel();
        panContourSettingTT = new javax.swing.JPanel();
        btnSaveConfig = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        chkConfigUseMRFInput = new javax.swing.JCheckBox();

        setName("Contour Configuration"); // NOI18N
        setPreferredSize(new java.awt.Dimension(911, 644));

        jTabbedPane2.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N

        panContourSettingSpeed.setLayout(new java.awt.BorderLayout());
        jTabbedPane2.addTab("Speed", panContourSettingSpeed);

        panContourSettingTotalFlow.setLayout(new java.awt.BorderLayout());
        jTabbedPane2.addTab("Total Flow", panContourSettingTotalFlow);

        panContourSettingDensity.setLayout(new java.awt.BorderLayout());
        jTabbedPane2.addTab("Density", panContourSettingDensity);

        panContourSettingAverageFlow.setLayout(new java.awt.BorderLayout());
        jTabbedPane2.addTab("Occupancy", panContourSettingAverageFlow);

        panContourSettingTT.setLayout(new java.awt.BorderLayout());
        jTabbedPane2.addTab("TravelTime", panContourSettingTT);

        btnSaveConfig.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnSaveConfig.setText("Save Configurations");
        btnSaveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveConfigActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extraction Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 12))); // NOI18N

        chkConfigUseMRFInput.setForeground(new java.awt.Color(255, 255, 255));
        chkConfigUseMRFInput.setText("Use Input Flow of Ramp on using Mainlane and Ramp Flow Rates");
        chkConfigUseMRFInput.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkConfigUseMRFInput)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkConfigUseMRFInput)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnSaveConfig))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnSaveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 915, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 655, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveConfigActionPerformed
//        TICASOption.save(getOption(false), OPTION_FILE);
//        JOptionPane.showMessageDialog(this, "Configuration has been saved", "Info", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnSaveConfigActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveConfig;
    private javax.swing.JCheckBox chkConfigUseMRFInput;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel panContourSettingAverageFlow;
    private javax.swing.JPanel panContourSettingDensity;
    private javax.swing.JPanel panContourSettingSpeed;
    private javax.swing.JPanel panContourSettingTT;
    private javax.swing.JPanel panContourSettingTotalFlow;
    // End of variables declaration//GEN-END:variables

    public void setContourOption(){
        this.evaluationOption = khtaOption.getEvaluationOption();
        
        // if ticas option is loaded
        if (khtaOption.isLoaded()) {
            this.speedContourSetting.setContourSetting(evaluationOption.getContourSetting(ContourType.SPEED));
            this.totalFlowContourSetting.setContourSetting(evaluationOption.getContourSetting(ContourType.TOTAL_FLOW));
            this.occupancyContourSetting.setContourSetting(evaluationOption.getContourSetting(ContourType.OCCUPANCY));
            this.densityContourSetting.setContourSetting(evaluationOption.getContourSetting(ContourType.DENSITY));
            this.TTContourSetting.setContourSetting(evaluationOption.getContourSetting(ContourType.TT));
//          applyOption(khtaOption);            
        } else {
            System.err.println("Option is not loaded");
            // option isn't loaded
            this.speedContourSetting.setUnit("km/h");
            this.totalFlowContourSetting.setUnit("veh/h");
            this.occupancyContourSetting.setUnit("%");
            this.densityContourSetting.setUnit("veh/km");
            TTContourSetting.setUnit("min");
        }
        // add contour setting panel to tab panel
        this.panContourSettingSpeed.add(speedContourSetting, BorderLayout.NORTH);
        this.panContourSettingTotalFlow.add(totalFlowContourSetting, BorderLayout.NORTH);
        this.panContourSettingAverageFlow.add(occupancyContourSetting, BorderLayout.NORTH);
        this.panContourSettingDensity.add(densityContourSetting, BorderLayout.NORTH);
        this.panContourSettingTT.add(TTContourSetting, BorderLayout.NORTH);
        
        // contourTapPanel에 있는 세팅 읽기
        evaluationOption.addContourPanel(ContourType.SPEED, speedContourSetting);
        evaluationOption.addContourPanel(ContourType.DENSITY, this.densityContourSetting);
        evaluationOption.addContourPanel(ContourType.TOTAL_FLOW, this.totalFlowContourSetting);
        evaluationOption.addContourPanel(ContourType.OCCUPANCY, this.occupancyContourSetting);
        evaluationOption.addContourPanel(ContourType.TT, this.TTContourSetting);
        evaluationOption.addContourPanel(ContourType.STT, this.TTContourSetting);
    }

    // 구현해야할save load
    /**
     * Set TICAS interface according to saved option
     * @param opt 
     */
//    private void applyOption(TICASOption ticasOption) {
//
//        EvaluationOption opt = ticasOption.getEvaluationOption();
//        
//        // times
//        this.cbxStartHour.setSelectedIndex(opt.getStartHour());
//        this.cbxStartMin.setSelectedIndex(opt.getStartMin());
//        
//        // duration and times
//        int duration = ticasOption.getDuration();
//        if (duration > 0) {
//            this.cbxDuration.setSelectedItem(duration);
//            this.cbxEndHour.setEnabled(false);
//            this.cbxEndMin.setEnabled(false);
//        } else {
//            this.cbxEndHour.setSelectedIndex(opt.getEndHour());
//            this.cbxEndMin.setSelectedIndex(opt.getEndMin());
//        }        
//        
//        // set all checkboxes in saved option checked
//        for (OptionType option : opt.getOptions()) {
//            option.getCheckBox().setSelected(true);
//        }
//
//        // detector options
//        if (opt.hasOption(OptionType.DETECTOR_OPT_WITHOUT_LANECONFIG) || opt.hasOption(OptionType.DETECTOR_OPT_WITH_LANECONFIG)) {
//            this.chkDetectorSpeed.setEnabled(true);
//            this.chkDetectorDensity.setEnabled(true);
//            this.chkDetectorFlow.setEnabled(true);
//            this.chkDetectorOccupancy.setEnabled(true);
//        }        
//        
//        // output direction
//        this.cbxOutputDirection.setSelectedItem(opt.getOutputDirection());
//
//        // output folder
//        this.tbxOutputFolder.setText(ticasOption.getOutputPath());
//
//        // configuration values
//        this.tbxCongestionThresholdSpeed.setText(String.format("%d", opt.getCongestionThresholdSpeed()));
//        this.tbxCriticalDensity.setText(String.format("%d", opt.getCriticalDensity()));
//        this.tbxLaneCapacity.setText(String.format("%d", opt.getLaneCapacity()));
//        
//        // selected section index
//        int selectedSectionIndex = ticasOption.getSeletedSectionIndex();
////        if(selectedSectionIndex < this.cbxSections.getItemCount()-1) this.cbxSections.setSelectedIndex(selectedSectionIndex);
//        
//        // selected interval index
//        int selectedIntervalSeconds = ticasOption.getSelectedIntervalSeconds();
//        for(int i = 0 ; i<cbxInterval.getItemCount();i++){
//                Interval in = (Interval)cbxInterval.getItemAt(i);
//                if(in.getSecond() == selectedIntervalSeconds){
//                        cbxInterval.setSelectedIndex(i);
//                        break;
//                }
//        }
////        if(selectedIntervalSeconds < this.cbxInterval.getItemCount()-1) this.cbxInterval.setSelectedIndex(selectedIntervalIndex);        
//        
//        InfraConstants.TRAFFIC_DATA_URL = ticasOption.getTrafficDataUrl();
//        InfraConstants.TRAFFIC_CONFIG_URL = ticasOption.getTrafficConfigUrl();
//    }

}
