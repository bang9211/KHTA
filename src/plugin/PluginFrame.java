/*
 * Copyright (C) 2011 NATSRL @ UMD (University Minnesota Duluth, US) and
 * Software and System Laboratory @ KNU (Kangwon National University, Korea) 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package plugin;

import infra.Infra;
import infra.Period;
import infra.Section;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import net.xeoh.plugins.base.PluginManager;
import net.xeoh.plugins.base.impl.PluginManagerFactory;

/**
 *
 * @author Chongmyung Park
 */
public class PluginFrame extends javax.swing.JFrame {

    private PluginManager pm = PluginManagerFactory.createPluginManager();
    IKHTAPlugin plugin = null;
    IKHTAAfterSimulation khtaFrame = null;
    private Section section;
    private Period period;
    private PluginFrame thisFrame;
    private PluginInfo pluginInfo;
    Infra infra = Infra.getInstance();
    
//    public boolean IsVisible = false;
    public PluginFrame(final IKHTAAfterSimulation khtaFrame) {
        initComponents();
        this.khtaFrame = khtaFrame;
        this.thisFrame = this;
//        this.IsVisible = true;
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                checkClose();
            }
        });        
    }
    
    private void checkClose() {
        String adding = "";
        if(this.pluginInfo.getType().isSimulationPlugin() && section == null) {
            adding = "\nSimulation has not been done!!";
        }
        if(JOptionPane.showConfirmDialog(rootPane, "Close?"+adding, "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            khtaFrame.afterSimulation(thisFrame);
            dispose();
            
        }                        
    }
    
    public void finalize() throws Throwable{
        System.out.println("end");
    }

    /**
     * 
     * Sets plugin information and 
     * makes and initialize instance of plugin 
     * @param pluginInfo plugin information
     * @param tmo   TMO object
     * @throws Exception
     */
    public void setPluginInfo(PluginInfo pluginInfo) throws Exception {
        if (pluginInfo == null) {
            System.out.println("Plugin is not selected");
            dispose();
            return;
        }        
        this.pluginInfo = pluginInfo;
        Class klass = pluginInfo.getPluginClass();
        if(klass == null) {
            
            if(new File(pluginInfo.getJarfilePath()).exists()) {
                System.out.println(pluginInfo.getJarfilePath());
            } else {
                System.out.println("Not Exists : " + pluginInfo.getJarfilePath());
            }
            pm.addPluginsFrom(new File(pluginInfo.getJarfilePath()).toURI());
            plugin = pm.getPlugin(IKHTAPlugin.class);
        } else {
            plugin = (IKHTAPlugin)klass.newInstance();
        }
        
        if(plugin == null) {
            JOptionPane.showMessageDialog(rootPane, "ERROR : Plugin can not be loaded...");
            dispose();
            return;
        } else {
            this.setTitle(pluginInfo.getName());
            plugin.init(this);
        }
    }    

    public void afterSimulation(Section section, Period period) {
        this.section = section;
        this.period = period;
    }    
    
    public Section getSection() { return section; }
    public Period getPeriod() { return period; }
    
    
    public void addFileMenu(JMenuItem item) {
        this.menuFile.add(item);
    }
    
    public void addToolsMenu(JMenuItem item) {
        this.menuTools.add(item);
    }    
    
    public void addHelpMenu(JMenuItem item) {
        this.menuHelp.add(item);
    }

    public PluginInfo getPluginInfo() {
        return pluginInfo;
    }
    
    
    
    /** Creates new form SimulationFrame */
    public PluginFrame() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Plugin Frame for TICAS");

        menuBar.setFont(new java.awt.Font("Verdana", 0, 12));

        menuFile.setText("File");

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuTools.setText("Tools");
        menuBar.add(menuTools);

        menuHelp.setText("Help");

        jMenuItem1.setText("TICAS Plugin");
        menuHelp.add(jMenuItem1);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        checkClose();
    }//GEN-LAST:event_menuItemExitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenu menuTools;
    // End of variables declaration//GEN-END:variables

}
